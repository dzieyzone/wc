<?php
define('DRAGONPAY_TEST_URL', 'http://test.dragonpay.ph');
define('DRAGONPAY_LIVE_URL', 'https://secure.dragonpay.ph');

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_dragonpay_menu() {
  $items = array();
  $items['cart/dragonpay/complete'] = array(
    'title' => t('Order complete'),
    'page callback' => 'uc_dragonpay_complete',
    'access callback' => 'uc_dragonpay_completion_access',
    'type' => MENU_CALLBACK,
  );
  $items['cart/dragonpay/finalize'] = array(
    'title' => t('Order complete'),
    'page callback' => 'uc_dragonpay_finalize',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_ucga_display().
 */
function uc_dragonpay_ucga_display() {
  // Tell UC Google Analytics to display the e-commerce JS on the custom
  // order completion page for this module.
  if (arg(0) == 'cart' && arg(1) == 'dragonpay' && arg(2) == 'complete') {
    return TRUE;
  }
}

/**
 * Make sure anyone can complete their Dragonpay orders.
 */
function uc_dragonpay_completion_access() {
  return TRUE;
}

/**
 * Implementation of hook_form_alter().
 */
function uc_dragonpay_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_review_form' && ($order_id = intval($_SESSION['cart_order'])) > 0) {
    $order = uc_order_load($order_id);

    if ($order->payment_method == 'dragonpay') {
      _dragonpay_set_transid( $order->order_id );
      $country = uc_get_country_data(array('country_id' => $order->billing_country));
      if ($country === FALSE) {
        $country = array(0 => array('country_iso_code_2' => 'PH'));
      }
      $billzone = (is_numeric($order->billing_zone)) ? uc_zone_get_by_id($order->billing_zone) : '';
      $billinfo = array(
                        'txnId'=> _dragonpay_get_transid(),
                        'merchantId'=> variable_get('uc_dragonpay_mid', ''),
                        'firstName'=>$order->billing_first_name,
                        'lastName'=>$order->billing_last_name,
                        'address1'=> $order->billing_street1,
                        'address2'=> $order->billing_street2,
                        'city'=>$order->billing_city,
                        'state'=>$billzone,
                        'country'=>$country[0]['country_iso_code_2'],
                        'zipCode'=>$order->billing_postal_code,
                        'telNo'=>$order->billing_phone,
                        'email'=> $order->primary_email,
                        );
      $params = http_build_query($billinfo, '', '&');
      $request_headers = array('Content-Type' => 'application/x-www-form-urlencoded');
      $sendurl = _dragonpay_post_url('bill');
      $method = 'GET';
      $retry = 3;
      $http_result = drupal_http_request($sendurl, $request_headers, $method, $params, $retry);
      unset($form['submit']);
      $form['#prefix'] = '<table style="display: inline; padding-top: 1em;"><tr><td>';
      $form['#suffix'] = '</td><td>'. drupal_get_form('uc_dragonpay_form', $order) .'</td></tr></table>';
    }
  }
}


/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_payment_method().
 */
function uc_dragonpay_payment_method() {
  $path = base_path() . drupal_get_path('module', 'uc_dragonpay');
  $path = base_path() . drupal_get_path('module', 'uc_dragonpay');
  $title .='<img class="dragonpay-gif" src="'. $path .'/logo_small_DRAGONPAY.gif" style="position: relative; top: 5px;" />';

  $methods[] = array(
    'id' => 'dragonpay',
    'name' => t('DragonPay'),
    'title' => $title,
    'review' => t('DragonPay Payment Gateway'),
    'desc' => t('Redirect to DragonPay.'),
    'callback' => 'uc_payment_method_dragonpay',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}


/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Callback for DragonPay payment method settings.
 */
function uc_payment_method_dragonpay($op, &$arg1) {
  switch ($op) {
    case 'cart-details':
      unset($_SESSION['pay_method']);
      $path = base_path() . drupal_get_path('module', 'uc_dragonpay');
    $img ='<img class="dragonpay-gif" src="'. $path .'/logo_small_DRAGONPAY.gif" style="position: relative; top: 5px;" />';
      $details = '<div class="form-item">'. $img . '<input type="hidden" name="pay_method" id="edit-dragonpay-pay_method" value="PHP"></div>';
      return $details;

    case 'cart-process':
      $_SESSION['pay_method'] = $_POST['pay_method'];
      return;
    case 'settings':
      $form['uc_dragonpay_mid'] = array(
        '#type' => 'textfield',
        '#title' => t('Merchant ID'),
        '#description' => t('Your DragonPay merchant ID.'),
        '#default_value' => variable_get('uc_dragonpay_mid', ''),
        '#size' => 16,
      );
      $form['uc_dragonpay_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Password'),
        '#description' => t('Your DragonPay merchant account password.'),
        '#default_value' => variable_get('uc_dragonpay_key', ''),
        '#size' => 16,
      );
      $form['uc_dragonpay_demo'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable demo mode, allowing you to process fake orders for testing purposes.'),
        '#default_value' => variable_get('uc_dragonpay_demo', TRUE),
      );
      $form['uc_dragonpay_method_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Payment method title'),
        '#default_value' => variable_get('uc_dragonpay_method_title', t('DragonPay')),
      );
      $form['uc_dragonpay_method_title_icons'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show DragonPay supported credit card icons beside the payment method title.'),
        '#default_value' => variable_get('uc_dragonpay_method_title_icons', TRUE),
      );
      $form['uc_dragonpay_checkout_button'] = array(
        '#type' => 'textfield',
        '#title' => t('Order review submit button text'),
        '#description' => t('Provide DragonPay specific text for the submit button on the order review page.'),
        '#default_value' => variable_get('uc_dragonpay_checkout_button', t('Submit Order')),
      );
      $form['uc_dragonpay_prefix'] = array(
        '#type' => 'textfield',
        '#title' => t('Prefix of transaction'),
        '#description' => t('Used in generating transaction id.'),
        '#default_value' => variable_get('uc_dragonpay_prefix', 'WEB'),
      );
      return $form;
  }
}

// Form to build the submission to DragonPay.
function uc_dragonpay_form($form_state, $order) {

  $txn_id = _dragonpay_get_transid();
  $txn_amt = uc_currency_format($order->order_total, FALSE, FALSE, '.');
  $txn_cur = 'PHP';

  $data = array(
    'merchantid' => variable_get('uc_dragonpay_mid', ''),
    'txnid' => $txn_id,
    'amount' => $txn_amt,
    'ccy' => $txn_cur,
    'description' => variable_get('uc_store_name', ''),
    'email' => $order->primary_email,
  );

  $digest = $data;
  $digest['key'] = variable_get('uc_dragonpay_key', '');
  $pdigest = implode(':', $digest);

  $data['digest'] = sha1($pdigest);

  $form['#method'] = 'get';
  $form['#action'] = _dragonpay_post_url();

  foreach ($data as $name => $value) {
    $form[$name] = array('#type' => 'hidden', '#value' => $value);
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => variable_get('uc_dragonpay_checkout_button', t('Submit Order')),
  );

  return $form;
}

function uc_dragonpay_complete($cart_id = 0) {
  $txnid = 0;
  
  if (isset($_GET['txnid'])){
    list(,,$txnid) = explode('_', check_plain($_GET['txnid']));
    watchdog('uc_dragonpay',
      t('Receiving new order notification for order !order_id, DragonPay transaction id:!dragonpaytransid.',
        array('!order_id' => check_plain($txnid),
          '!dragonpaytransid'=> check_plain($_GET['txnid'])
        )
      )
    );
  }

  //load order
  $order = uc_order_load(check_plain($txnid));
  //check if order exist or order is not in checkout
  if ($order === FALSE || check_plain($_GET['status']) == 'f'){
    if (check_plain($_GET['status']) == 'f') {
      drupal_set_message(
        t('An error has occurred during payment due to the following reason:') . t(check_plain($_GET['message'])), 'error');
      //uc_order_update_status($order->order_id, 'dragonpay_checkout');
    }
    else {
      drupal_set_message(t('An error has occurred during payment. Please contact us to ensure your order has submitted.'), 'error');
    //uc_order_update_status($order->order_id, 'dragonpay_checkout');
    }
    //$_SESSION['cart_order'] = NULL;
    //unset($_SESSION['cart_order']);
    drupal_goto('cart');
  }

  //check the integrity of the message
  $params = array(
    'txnid' => '',
    'refno' => '',
    'status' => '',
    'message' => ''
  );
  foreach ($params as $id=>$param){
    if (isset($_GET[$id])){
      $params[$id] = trim($_GET[$id]);
    }
  }
  $params['digest'] = variable_get('uc_dragonpay_key', '');
  $digest = implode(':', $params);

  $chk_rdigest = sha1($digest);

  if ($chk_rdigest != check_plain(trim($_GET['digest']))) {
    uc_order_comment_save($order->order_id, 0, t('Attempted unverified DragonPay completion for this order.'), 'admin');
    watchdog('uc_dragonpay',
      t('Params: !params \nDigest: !digest \ngetDigest: !getDigest',
        array('!params' => print_r($params, TRUE),
          '!digest' => $chk_rdigest,
          '!getDigest'=> $_GET['digest']
        )
      )
    );
  }
  else {
    $dragonpay_result = (isset($_GET['status'])) ? strtolower(check_plain($_GET['status'])) : 'none';
    switch ($dragonpay_result){
      case 's': //transaction successful
        $comment = t('DragonPay Reference Number: !refnum.\nMessage: !msg',
          array('!refnum' => check_plain($_GET['refno']),
            '!msg'=> check_plain($_GET['message'])
          )
        );
        uc_payment_enter($order->order_id, 'dragonpay', $order->order_total, 0, NULL, $comment);
        uc_order_comment_save(
          $order->order_id,
          0,
          t('Payment of !amount !currency submitted through DragonPay.\nMessage: !msg',
            array( '!amount' => uc_currency_format($order->order_total, FALSE, FALSE, '.'),
              '!currency' => variable_get('uc_currency_code', ''),
              '!msg'=> check_plain($_GET['message'])
           )
          ),
          'order',
          'payment_received');
        uc_cart_empty($txnid);// Empty that cart...
        uc_order_save($order);// Save changes to order without it's completion (it will be on finalization step)
        $url = 'cart/dragonpay/finalize/'. $order->order_id; //only redirect if successful
        drupal_goto($url);

        /*
        $output = '<script type="text/javascript">window.location = "'. url($url) .'";</script>';// Javascript redirect on the finalization page.
        $output .= l(t('Click to complete checkout.'), $url);// Text link for users without Javascript enabled.
        while (strlen($output) < 255) {// DragonPay needs page larger than 255 characters to display.
          $output .= '&nbsp;';
        }
        print $output;
        exit();
        * 
        */
      break;
      default:
    //case 'p': //pending status code goes here
      $dragonpay_err_code = array(
        's' => 'Success',
        'f' => 'Failure',
        'p' => 'Pending',
        'u' => 'Unknown',
        'r' => 'Refund',
        'k' => 'Chargeback',
        'v' => 'Void',
        'a' => 'Authorized',
      );

      $comment = t(
        'DragonPay Reference Number: !refnum.',
        array('!refnum' => check_plain($_GET['refno']))
      );
      uc_payment_enter($order->order_id, 'dragonpay', $order->order_total, 0, NULL, $comment);
      if ($dragonpay_result == 'p') {
          $payment_msg = t('Payment is in pending status. Please settle the amount to complete the purchase. Details: !detail',
          array('!detail'=> check_plain($_GET['message']))
        );
        $user_msg = t("Please complete your payment inorder to complete the purchase. <br /> Reference: !msg",
          array('!msg'=> check_plain($_GET['message']))
        );
        $comment_type = 'order';
      }
      else {
        $payment_msg = t('Payment unsuccessful.\n Code: !code \nDetails: !detail',
        array(
          '!code' => $dragonpay_err_code[$dragonpay_result],
          '!detail'=> check_plain($_GET['message']))
        );
        $user_msg = t("Error occured while processing your payment. <br />Code: !code<br /> Details: !msg",
          array(
            '!code' => $dragonpay_err_code[$dragonpay_result],
            '!msg'=> check_plain($_GET['message'])
          )
        );
      } 

      uc_order_comment_save(
        $order->order_id,
        0,
        $payment_msg,
        'order'
      );
      uc_cart_empty($txnid);// Empty that cart...
      uc_order_save($order);
      uc_order_update_status($order->order_id, 'dragonpay_pending');
      drupal_set_message($user_msg, 'error');
      drupal_goto('user/'. $order->uid .'/orders');
    }
  }
}

function uc_dragonpay_finalize() {
  $order = uc_order_load(arg(3));

  if (empty($order)) {
    // Display messages to customers and the administrator if the order was lost.
    drupal_set_message(t("We're sorry. An error occurred while processing your order that prevents us from completing it at this time. Please contact us and we will resolve the issue as soon as possible."), 'error');
    watchdog('uc_cart', t('An empty order made it to checkout! Cart order ID: @cart_order', array('@cart_order' => $_SESSION['cart_order'])), WATCHDOG_ERROR);
    drupal_goto('cart');
  }

  $output = uc_cart_complete_sale($order, variable_get('uc_new_customer_login', FALSE));

  // Add a comment to let sales team know this came in through the site.
  uc_order_comment_save($order->order_id, 0, t('Order created through website.'), 'admin');
  uc_order_update_status($order->order_id, 'dragonpay_received');

  $page = variable_get('uc_cart_checkout_complete_page', '');

  if (!empty($page)) {
    drupal_goto($page);
  }

  return $output;
}

function _dragonpay_post_url($type = 'pay') {
  $urls = array(
    'demo' => array(
      'pay' => DRAGONPAY_TEST_URL . '/Pay.aspx',
      'bill'=> DRAGONPAY_TEST_URL . '/SendBillingInfo.aspx'
    ),
    'live' => array(
      'pay' => DRAGONPAY_LIVE_URL . '/Pay.aspx',
      'bill'=> DRAGONPAY_LIVE_URL . '/SendBillingInfo.aspx'
  )
  );
  
  return (variable_get('uc_dragonpay_demo', TRUE)) ? $urls['demo'][$type] : $urls['live'][$type];
}

function _dragonpay_set_transid($id){
  $_SESSION['dragonpay_transid'] = variable_get('uc_dragonpay_prefix', 'WEB') . '_' . time() . '_' . $id;
}

function _dragonpay_get_transid(){
  return $_SESSION['dragonpay_transid'];
}